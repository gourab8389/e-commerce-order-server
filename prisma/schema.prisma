generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  sellerId    String
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([sellerId])
  @@index([isActive])
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  images       String[]      @default([])
  price        Decimal       @db.Decimal(10, 2)
  originalPrice Decimal?     @db.Decimal(10, 2)
  discount     Decimal?      @db.Decimal(5, 2)
  quantity     Int           @default(0)
  unit         String        @default("piece")
  sku          String?       @unique
  categoryId   String
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sellerId     String
  isActive     Boolean       @default(true)
  isFeatured   Boolean       @default(false)
  tags         String[]      @default([])
  nutritionInfo Json?
  orderItems   OrderItem[]
  cartItems    CartItem[]
  reviews      Review[]
  totalSold    Int           @default(0)
  avgRating    Decimal       @default(0) @db.Decimal(3, 2)
  reviewCount  Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([sellerId])
  @@index([categoryId])
  @@index([isActive, isFeatured])
  @@index([name])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  status          OrderStatus   @default(PENDING)
  items           OrderItem[]
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2)
  shippingFee     Decimal       @default(0) @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?
  shippingAddress Json
  billingAddress  Json?
  notes           String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  product      Product @relation(fields: [productId], references: [id])
  sellerId     String
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  totalPrice   Decimal @db.Decimal(10, 2)
  commission   Decimal @db.Decimal(5, 2)
  status       OrderItemStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([sellerId])
  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  rating    Int      @db.SmallInt
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@index([productId])
  @@index([rating])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum OrderItemStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}